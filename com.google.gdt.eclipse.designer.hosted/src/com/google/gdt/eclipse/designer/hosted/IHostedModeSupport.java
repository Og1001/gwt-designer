/*
 * Copyright 2011 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gdt.eclipse.designer.hosted;

import org.eclipse.core.runtime.IProgressMonitor;

/**
 * Abstract interface for hosted-mode support.
 * 
 * @author mitin_aa
 * @coverage gwtHosted
 */
public interface IHostedModeSupport {
	/**
	 * Initialized the hosted mode support.
	 * 
	 * @param browserStartupUrl
	 *            the url with which the {@link IBrowserShell} would be initialized.
	 * @param moduleName
	 *            the module name to be loaded.
	 * @param monitor
	 *            the {@link IProgressMonitor} instance.
	 * @param timeout
	 *            the maximum time for gwt hosted mode to initialize.
	 */
	void startup(String browserStartupUrl, String moduleName, IProgressMonitor monitor, int timeout)
			throws Exception;
	/**
	 * Disposes the hosted mode support.
	 */
	void dispose();
	/**
	 * Set this hosted mode support as active for current operation.
	 */
	void activate() throws Exception;
	/**
	 * @return the platform-dependent instance of {@link IBrowserShell} for this hosted mode support.
	 */
	IBrowserShell getBrowserShell();
	/**
	 * @return the class loader for GWT "user" classes (for classes, which contains JS-code inside).
	 */
	ClassLoader getClassLoader();
	/**
	 * @return the {@link ClassLoader} which is used for generators. It provides "dev" classes (such as
	 *         <code>JType</code>) and some "user" classes (such as generators).
	 */
	ClassLoader getDevClassLoader();
	/**
	 * Invalidates the given type name, so the next rebind request will generate type again.
	 */
  void invalidateRebind(String typeName);
	/**
	 * Finds a class or interface given its fully-qualified name.
	 * 
	 * @param name
	 *            fully-qualified class/interface name - for nested classes, use its source name rather than
	 *            its binary name (that is, use a "." rather than a "$")
	 * 
	 * @return <code>null</code> if the type is not found
	 */
	Object findJType(String name);
	/**
	 * Loads and returns as byte array the resource generated by GWT generators, ex., image bundle. Returns
	 * <code>null</code> if the resource can't be found.
	 * 
	 * @return the byte array of the generated resource.
	 */
	byte[] getGeneratedResource(String resourceName) throws Exception;
	/**
	 * @return the {@link ILogSupport} providing access to log functions.
	 */
	ILogSupport getLogSupport();
	/**
	 * Delegating to invoke a native JavaScript function that returns a boolean value.
	 */
	boolean invokeNativeBoolean(String string, Class[] classes, Object[] objects);
	/**
	 * Delegating to invoke a native void JavaScript function.
	 */
	void invokeNativeVoid(String string, Class[] classes, Object[] objects);
	/**
	 * Delegating to invoke a native JavaScript function that returns a String value.
	 */
	String invokeNativeString(String string, Class[] classes, Object[] objects);
}
